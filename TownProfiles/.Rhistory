NHCtotalpop<-acs.fetch(2013, 5, geography=geo.make(state=9, county=9), table.number="B01003", col.names="pretty")
NLCtotalpop<-acs.fetch(2013, 5, geography=geo.make(state=9, county=11), table.number="B01003", col.names="pretty")
TCtotalpop<-acs.fetch(2013, 5, geography=geo.make(state=9, county=13), table.number="B01003", col.names="pretty")
WCtotalpop<-acs.fetch(2013, 5, geography=geo.make(state=9, county=15), table.number="B01003", col.names="pretty")
regionA <- rbind(CTtotalpop, GNHtotalpop)
regionB <- rbind(GWBtotalpop, Valleytotalpop)
regionC <- rbind(FCtotalpop, HCtotalpop)
regionD <- rbind(LCtotalpop, MCtotalpop)
regionE <- rbind(NHCtotalpop, NLCtotalpop)
regionF <- rbind(TCtotalpop, WCtotalpop)
regionAA <- rbind(regionA, regionB)
regionBB <- rbind(regionC, regionD)
regionCC <- rbind(regionE, regionF)
regionAAA <-rbind(regionAA, regionBB)
regionAAAA <-rbind(regionAAA,regionCC)
CTtotalpopA<-rbind(regionAAAA, totalpop)
# Total Population 18 and under or 65 and over
# fetch ACS CT data
# table name full = acs.fetch(endyear, 5, geography=geomake(state=9,county="*",county.subdivision="*"), table.number="XXX", col.names="pretty")
CTPopAge<-acs.fetch(2013, 5, geography=geo.make(state=9), table.number="B01001", col.names="pretty")
# fetch ACS town data
PopAgefull<-acs.fetch(2013, 5, geography=geo.make(state=9,county="*",county.subdivision="*"), table.number="B01001", col.names="pretty")
# shorten town names
# geography(table name full)[,1]=str_replace(geography(table name full)[,1]," town.*","")
geography(PopAgefull)[,1]=str_replace(geography(PopAgefull)[,1]," town.*","")
# delete county subdivisions undefined
# table name = table name full[c(2:79,81:95,97:123,125:173),]
PopAge<-PopAgefull[c(2:79,81:95,97:123,125:173),]
CTAge<-acs.fetch(2013, 5, geography=geo.make(state=9), table.number="B01001", col.names="pretty")
GNHAge<-acs.fetch(2013, 5, geography=GNH, table.number="B01001", col.names="pretty")
GWBAge<-acs.fetch(2013, 5, geography=GWB, table.number="B01001", col.names="pretty")
ValleyAge<-acs.fetch(2013, 5, geography=Valley, table.number="B01001", col.names="pretty")
FCAge<-acs.fetch(2013, 5, geography=geo.make(state=9, county=1), table.number="B01001", col.names="pretty")
HCAge<-acs.fetch(2013, 5, geography=geo.make(state=9, county=3), table.number="B01001", col.names="pretty")
LCAge<-acs.fetch(2013, 5, geography=geo.make(state=9, county=5), table.number="B01001", col.names="pretty")
MCAge<-acs.fetch(2013, 5, geography=geo.make(state=9, county=7), table.number="B01001", col.names="pretty")
NHCAge<-acs.fetch(2013, 5, geography=geo.make(state=9, county=9), table.number="B01001", col.names="pretty")
NLCAge<-acs.fetch(2013, 5, geography=geo.make(state=9, county=11), table.number="B01001", col.names="pretty")
TCAge<-acs.fetch(2013, 5, geography=geo.make(state=9, county=13), table.number="B01001", col.names="pretty")
WCAge<-acs.fetch(2013, 5, geography=geo.make(state=9, county=15), table.number="B01001", col.names="pretty")
regionA <- rbind(CTPopAge, GNHAge)
regionB <- rbind(GWBAge, ValleyAge)
regionC <- rbind(FCAge, HCAge)
regionD <- rbind(LCAge, MCAge)
regionE <- rbind(NHCAge, NLCAge)
regionF <- rbind(TCAge, WCAge)
regionAA <- rbind(regionA, regionB)
regionBB <- rbind(regionC, regionD)
regionCC <- rbind(regionE, regionF)
regionAAA <-rbind(regionAA, regionBB)
regionAAAA <-rbind(regionAAA,regionCC)
allPopAge<-rbind(regionAAAA, PopAge)
# Calculate population per age group per town
age0to17A=apply(X=allPopAge[,c(3:6,27:30)], FUN=sum, MARGIN=2, agg.term="age0to17")
age65plusA=apply(X=allPopAge[,c(20:25,44:49)], FUN=sum, MARGIN=2, agg.term="age65plus")
# Calculate pct of population per age group per town
PctAge0to17A=divide.acs(numerator=age0to17A, denominator=allPopAge[,1], method="proportion")
PctAge65plusA=divide.acs(numerator=age65plusA, denominator=allPopAge[,1], method="proportion")
head(allPopAge)
head(allPopAge,20)
# Calculate population per age group per town
age0to17A=apply(X=allPopAge[,c(3:6,27:30)], FUN=sum, MARGIN=2, agg.term="age0to17")
age65plusA=apply(X=allPopAge[,c(20:25,44:49)], FUN=sum, MARGIN=2, agg.term="age65plus")
# Calculate pct of population per age group per town
PctAge0to17A=divide.acs(numerator=age0to17A, denominator=allPopAge[,1], method="proportion")
PctAge65plusA=divide.acs(numerator=age65plusA, denominator=allPopAge[,1], method="proportion")
# Population by Race
# fetch ACS CT data
# table name full = acs.fetch(endyear, 5, geography=geomake(state=9,county="*",county.subdivision="*"), table.number="XXX", col.names="pretty")
CTPopRace<-acs.fetch(2013, 5, geography=geo.make(state=9), table.number="B03002", col.names="pretty")
# fetch ACS town data
PopRacefull<-acs.fetch(2013, 5, geography=geo.make(state=9,county="*",county.subdivision="*"), table.number="B03002", col.names="pretty")
# shorten town names
# geography(table name full)[,1]=str_replace(geography(table name full)[,1]," town.*","")
geography(PopRacefull)[,1]=str_replace(geography(PopRacefull)[,1]," town.*","")
# delete county subdivisions undefined
# table name = table name full[c(2:79,81:95,97:123,125:173),]
PopRace<-PopRacefull[c(2:79,81:95,97:123,125:173),]
GNHRace<-acs.fetch(2013, 5, geography=GNH, table.number="B03002", col.names="pretty")
GWBRace<-acs.fetch(2013, 5, geography=GWB, table.number="B03002", col.names="pretty")
ValleyRace<-acs.fetch(2013, 5, geography=Valley, table.number="B03002", col.names="pretty")
FCRace<-acs.fetch(2013, 5, geography=geo.make(state=9, county=1), table.number="B03002", col.names="pretty")
HCRace<-acs.fetch(2013, 5, geography=geo.make(state=9, county=3), table.number="B03002", col.names="pretty")
LCRace<-acs.fetch(2013, 5, geography=geo.make(state=9, county=5), table.number="B03002", col.names="pretty")
MCRace<-acs.fetch(2013, 5, geography=geo.make(state=9, county=7), table.number="B03002", col.names="pretty")
NHCRace<-acs.fetch(2013, 5, geography=geo.make(state=9, county=9), table.number="B03002", col.names="pretty")
NLCRace<-acs.fetch(2013, 5, geography=geo.make(state=9, county=11), table.number="B03002", col.names="pretty")
TCRace<-acs.fetch(2013, 5, geography=geo.make(state=9, county=13), table.number="B03002", col.names="pretty")
WCRace<-acs.fetch(2013, 5, geography=geo.make(state=9, county=15), table.number="B03002", col.names="pretty")
regionA <- rbind(CTPopRace, GNHRace)
regionB <- rbind(GWBRace, ValleyRace)
regionC <- rbind(FCRace, HCRace)
regionD <- rbind(LCRace, MCRace)
regionE <- rbind(NHCRace, NLCRace)
regionF <- rbind(TCRace, WCRace)
regionAA <- rbind(regionA, regionB)
regionBB <- rbind(regionC, regionD)
regionCC <- rbind(regionE, regionF)
regionAAA <-rbind(regionAA, regionBB)
regionAAAA <-rbind(regionAAA,regionCC)
# Merge town and CT data
allPopRace<-rbind(regionAAAA, PopRace)
# Calculate population per age group per town
WhiteNoHspA=apply(X=allPopRace[,3], FUN=sum, MARGIN=2, agg.term="WhiteNoHsp")
BlackA=apply(X=allPopRace[,4], FUN=sum, MARGIN=2, agg.term="Black")
HspA=apply(X=allPopRace[,c(12)], FUN=sum, MARGIN=2, agg.term="Hsp")
OtherRaceA=apply(X=allPopRace[,c(5:9)], FUN=sum, MARGIN=2, agg.term="OtherRace")
# Calculate pct of population per age group per town
PctWhiteNoHspA=divide.acs(numerator=WhiteNoHspA, denominator=allPopRace[,1], method="proportion")
PctBlackA=divide.acs(numerator=BlackA, denominator=allPopRace[,1], method="proportion")
PctHspA=divide.acs(numerator=HspA, denominator=allPopRace[,1], method="proportion")
PctOtherRaceA=divide.acs(numerator=OtherRaceA, denominator=allPopRace[,1], method="proportion")
# Homeownership
# fetch ACS CT data
# table name full = acs.fetch(endyear, 5, geography=geomake(state=9,county="*",county.subdivision="*"), table.number="XXX", col.names="pretty")
CTtenure<-acs.fetch(2013, 5, geography=geo.make(state=9), table.number="B25003", col.names="pretty")
# fetch ACS town data
towntenurefull<-acs.fetch(2013, 5, geography=geo.make(state=9,county="*",county.subdivision="*"), table.number="B25003", col.names="pretty")
# shorten town names
# geography(table name full)[,1]=str_replace(geography(table name full)[,1]," town.*","")
geography(towntenurefull)[,1]=str_replace(geography(towntenurefull)[,1]," town.*","")
# delete county subdivisions undefined
# table name = table name full[c(2:79,81:95,97:123,125:173),]
towntenure<-towntenurefull[c(2:79,81:95,97:123,125:173),]
GNHtenure<-acs.fetch(2013, 5, geography=GNH, table.number="B25003", col.names="pretty")
GWBtenure<-acs.fetch(2013, 5, geography=GWB, table.number="B25003", col.names="pretty")
Valleytenure<-acs.fetch(2013, 5, geography=Valley, table.number="B25003", col.names="pretty")
FCtenure<-acs.fetch(2013, 5, geography=geo.make(state=9, county=1), table.number="B25003", col.names="pretty")
HCtenure<-acs.fetch(2013, 5, geography=geo.make(state=9, county=3), table.number="B25003", col.names="pretty")
LCtenure<-acs.fetch(2013, 5, geography=geo.make(state=9, county=5), table.number="B25003", col.names="pretty")
MCtenure<-acs.fetch(2013, 5, geography=geo.make(state=9, county=7), table.number="B25003", col.names="pretty")
NHCtenure<-acs.fetch(2013, 5, geography=geo.make(state=9, county=9), table.number="B25003", col.names="pretty")
NLCtenure<-acs.fetch(2013, 5, geography=geo.make(state=9, county=11), table.number="B25003", col.names="pretty")
TCtenure<-acs.fetch(2013, 5, geography=geo.make(state=9, county=13), table.number="B25003", col.names="pretty")
WCtenure<-acs.fetch(2013, 5, geography=geo.make(state=9, county=15), table.number="B25003", col.names="pretty")
regionA <- rbind(CTtenure, GNHtenure)
regionB <- rbind(GWBtenure, Valleytenure)
regionC <- rbind(FCtenure, HCtenure)
regionD <- rbind(LCtenure, MCtenure)
regionE <- rbind(NHCtenure, NLCtenure)
regionF <- rbind(TCtenure, WCtenure)
regionAA <- rbind(regionA, regionB)
regionBB <- rbind(regionC, regionD)
regionCC <- rbind(regionE, regionF)
regionAAA <-rbind(regionAA, regionBB)
regionAAAA <-rbind(regionAAA,regionCC)
# Merge town and CT data
alltenure<-rbind(regionAAAA, towntenure)
# Calculate population per age group per town
TenureHouseholdsA=apply(X=alltenure[,c(1)], FUN=sum, MARGIN=2, agg.term="Households")
TenureOwnA=apply(X=alltenure[,c(2)], FUN=sum, MARGIN=2, agg.term="Owning Household")
PctTenureOwnA=divide.acs(numerator=TenureOwnA, denominator=alltenure[,1], method="proportion")
# INSERT  HOMEOWNERS WITH CAR
# INSERT COST-BURDENED (UNIVERSE MAY BE DIFFERENT THAN HOUSEHOLDS IF WE CANNOT REPORT MARGIN OF ERROR FOR ALL HOUSEHOLDS)
# Foreign Born
library(acs)
library(stringr)
api.key.install(key="61a6ec2a084f67119446589d66b12b702106746b")
# fetch ACS data
# table name full = acs.fetch(endyear, 5, geography=geomake(state=9,county="*",county.subdivision="*"), table.number="XXX", col.names="pretty")
towncitizenshipfull<-acs.fetch(2013, 5, geography=geo.make(state=9,county="*",county.subdivision="*"), table.number="B05001", col.names="pretty")
# shorten town names
# geography(table name full)[,1]=str_replace(geography(table name full)[,1]," town.*","")
geography(towncitizenshipfull)[,1]=str_replace(geography(towncitizenshipfull)[,1]," town.*","")
# delete county subdivisions undefined
# table name = table name full[c(2:79,81:95,97:123,125:173),]
towncitizenship<-towncitizenshipfull[c(2:79,81:95,97:123,125:173),]
# Fetch CT state data and calculate pct
CTcitizenship<-acs.fetch(2013, 5, geography=geo.make(state=9), table.number="B05001", col.names="pretty")
GNHcitizenship<-acs.fetch(2013, 5, geography=GNH, table.number="B05001", col.names="pretty")
GWBcitizenship<-acs.fetch(2013, 5, geography=GWB, table.number="B05001", col.names="pretty")
Valleycitizenship<-acs.fetch(2013, 5, geography=Valley, table.number="B05001", col.names="pretty")
FCcitizenship<-acs.fetch(2013, 5, geography=geo.make(state=9, county=1), table.number="B05001", col.names="pretty")
HCcitizenship<-acs.fetch(2013, 5, geography=geo.make(state=9, county=3), table.number="B05001", col.names="pretty")
LCcitizenship<-acs.fetch(2013, 5, geography=geo.make(state=9, county=5), table.number="B05001", col.names="pretty")
MCcitizenship<-acs.fetch(2013, 5, geography=geo.make(state=9, county=7), table.number="B05001", col.names="pretty")
NHCcitizenship<-acs.fetch(2013, 5, geography=geo.make(state=9, county=9), table.number="B05001", col.names="pretty")
NLCcitizenship<-acs.fetch(2013, 5, geography=geo.make(state=9, county=11), table.number="B05001", col.names="pretty")
TCcitizenship<-acs.fetch(2013, 5, geography=geo.make(state=9, county=13), table.number="B05001", col.names="pretty")
WCcitizenship<-acs.fetch(2013, 5, geography=geo.make(state=9, county=15), table.number="B05001", col.names="pretty")
regionA <- rbind(CTcitizenship, GNHcitizenship)
regionB <- rbind(GWBcitizenship, Valleycitizenship)
regionC <- rbind(FCcitizenship, HCcitizenship)
regionD <- rbind(LCcitizenship, MCcitizenship)
regionE <- rbind(NHCcitizenship, NLCcitizenship)
regionF <- rbind(TCcitizenship, WCcitizenship)
regionAA <- rbind(regionA, regionB)
regionBB <- rbind(regionC, regionD)
regionCC <- rbind(regionE, regionF)
regionAAA <-rbind(regionAA, regionBB)
regionAAAA <-rbind(regionAAA,regionCC)
# Merge town and CT data
allcitizenship<-rbind(regionAAAA, towncitizenship)
# Calculate population per citizenship group per town
ForeignA=apply(X=allCitizenship[,c(5:6)], FUN=sum, MARGIN=2, agg.term="Foreign Born")
AllPctForeignA=divide.acs(numerator=ForeignA, denominator=allCitizenship[,1], method="proportion")
ForeignA=apply(X=allcitizenship[,c(5:6)], FUN=sum, MARGIN=2, agg.term="Foreign Born")
AllPctForeignA=divide.acs(numerator=ForeignA, denominator=allcitizenship[,1], method="proportion")
# table name full = acs.fetch(endyear, 5, geography=geomake(state=9,county="*",county.subdivision="*"), table.number="XXX", col.names="pretty")
CTsex<-acs.fetch(2013, 5, geography=geo.make(state=9), table.number="B01001", col.names="pretty")
# fetch ACS town data
townsexfull<-acs.fetch(2013, 5, geography=geo.make(state=9,county="*",county.subdivision="*"), table.number="B01001", col.names="pretty")
# shorten town names
# geography(table name full)[,1]=str_replace(geography(table name full)[,1]," town.*","")
geography(townsexfull)[,1]=str_replace(geography(townsexfull)[,1]," town.*","")
# delete county subdivisions undefined
# table name = table name full[c(2:79,81:95,97:123,125:173),]
townsex<-townsexfull[c(2:79,81:95,97:123,125:173),]
GNHsex<-acs.fetch(2013, 5, geography=GNH, table.number="B01001", col.names="pretty")
GWBsex<-acs.fetch(2013, 5, geography=GWB, table.number="B01001", col.names="pretty")
Valleysex<-acs.fetch(2013, 5, geography=Valley, table.number="B01001", col.names="pretty")
FCsex<-acs.fetch(2013, 5, geography=geo.make(state=9, county=1), table.number="B01001", col.names="pretty")
HCsex<-acs.fetch(2013, 5, geography=geo.make(state=9, county=3), table.number="B01001", col.names="pretty")
LCsex<-acs.fetch(2013, 5, geography=geo.make(state=9, county=5), table.number="B01001", col.names="pretty")
MCsex<-acs.fetch(2013, 5, geography=geo.make(state=9, county=7), table.number="B01001", col.names="pretty")
NHCsex<-acs.fetch(2013, 5, geography=geo.make(state=9, county=9), table.number="B01001", col.names="pretty")
NLCsex<-acs.fetch(2013, 5, geography=geo.make(state=9, county=11), table.number="B01001", col.names="pretty")
TCsex<-acs.fetch(2013, 5, geography=geo.make(state=9, county=13), table.number="B01001", col.names="pretty")
WCsex<-acs.fetch(2013, 5, geography=geo.make(state=9, county=15), table.number="B01001", col.names="pretty")
regionA <- rbind(CTsex, GNHsex)
regionB <- rbind(GWBsex, Valleysex)
regionC <- rbind(FCsex, HCsex)
regionD <- rbind(LCsex, MCsex)
regionE <- rbind(NHCsex, NLCsex)
regionF <- rbind(TCsex, WCsex)
regionAA <- rbind(regionA, regionB)
regionBB <- rbind(regionC, regionD)
regionCC <- rbind(regionE, regionF)
regionAAA <-rbind(regionAA, regionBB)
regionAAAA <-rbind(regionAAA,regionCC)
# Merge town and CT data
allsex<-rbind(regionAAAA, townsex)
# Calculate population per age group per town
Totalsex=apply(X=allsex[,c(1)], FUN=sum, MARGIN=2, agg.term="Total Population")
MaleA=apply(X=allsex[,c(2)], FUN=sum, MARGIN=2, agg.term="Male")
FemaleA=apply(X=allsex[,c(26)], FUN=sum, MARGIN=2, agg.term="Female")
# Calculate pct of population per age group per town
PctMaleA=divide.acs(numerator=MaleA, denominator=Totalsex, method="proportion")
PctFemaleA=divide.acs(numerator=FemaleA, denominator=Totalsex, method="proportion")
edattainfull<-acs.fetch(2013, 5, geography=geo.make(state=9,county="*",county.subdivision="*"), table.number="B06009", col.names="pretty")
# shorten town names
# geography(table name full)[,1]=str_replace(geography(table name full)[,1]," town.*","")
geography(edattainfull)[,1]=str_replace(geography(towncitizenshipfull)[,1]," town.*","")
# delete county subdivisions undefined
# table name = table name full[c(2:79,81:95,97:123,125:173),]
edattain<-edattainfull[c(2:79,81:95,97:123,125:173),]
# Fetch CT state data and calculate pct
CTedattain<-acs.fetch(2013, 5, geography=geo.make(state=9), table.number="B06009", col.names="pretty")
GNHedattain<-acs.fetch(2013, 5, geography=GNH, table.number="B06009", col.names="pretty")
GWBedattain<-acs.fetch(2013, 5, geography=GWB, table.number="B06009", col.names="pretty")
Valleyedattain<-acs.fetch(2013, 5, geography=Valley, table.number="B06009", col.names="pretty")
FCedattain<-acs.fetch(2013, 5, geography=geo.make(state=9, county=1), table.number="B06009", col.names="pretty")
HCedattain<-acs.fetch(2013, 5, geography=geo.make(state=9, county=3), table.number="B06009", col.names="pretty")
LCedattain<-acs.fetch(2013, 5, geography=geo.make(state=9, county=5), table.number="B06009", col.names="pretty")
MCedattain<-acs.fetch(2013, 5, geography=geo.make(state=9, county=7), table.number="B06009", col.names="pretty")
NHCedattain<-acs.fetch(2013, 5, geography=geo.make(state=9, county=9), table.number="B06009", col.names="pretty")
NLCedattain<-acs.fetch(2013, 5, geography=geo.make(state=9, county=11), table.number="B06009", col.names="pretty")
TCedattain<-acs.fetch(2013, 5, geography=geo.make(state=9, county=13), table.number="B06009", col.names="pretty")
WCedattain<-acs.fetch(2013, 5, geography=geo.make(state=9, county=15), table.number="B06009", col.names="pretty")
regionA <- rbind(CTedattain, GNHedattain)
regionB <- rbind(GWBedattain, Valleyedattain)
regionC <- rbind(FCedattain, HCedattain)
regionD <- rbind(LCedattain, MCedattain)
regionE <- rbind(NHCedattain, NLCedattain)
regionF <- rbind(TCedattain, WCedattain)
regionAA <- rbind(regionA, regionB)
regionBB <- rbind(regionC, regionD)
regionCC <- rbind(regionE, regionF)
regionAAA <-rbind(regionAA, regionBB)
regionAAAA <-rbind(regionAAA,regionCC)
# Merge town and CT data
allEdattain<-rbind(regionAAAA, edattain)
# Calculate population per citizenship group per town
Adults25plusA=apply(X=allEdattain[,c(1)], FUN=sum, MARGIN=2, agg.term="No HS degree")
NoHSA=apply(X=allEdattain[,c(2)], FUN=sum, MARGIN=2, agg.term="No HS degree")
BachPlusA=apply(X=allEdattain[,c(5:6)], FUN=sum, MARGIN=2, agg.term="At least Bachelor's degree")
# Calculate pct per town
AdultPctNoHSA=divide.acs(numerator=NoHSA, denominator=allEdattain[,1], method="proportion")
AdultPctBachPlusA=divide.acs(numerator=BachPlusA, denominator=allEdattain[,1], method="proportion")
# Median Income
# fetch ACS CT data
# table name full = acs.fetch(endyear, 5, geography=geomake(state=9,county="*",county.subdivision="*"), table.number="XXX", col.names="pretty")
CTmedianinc<-acs.fetch(2013, 5, geography=geo.make(state=9), table.number="B19013", col.names="pretty")
# fetch ACS town data
townmedianincfull<-acs.fetch(2013, 5, geography=geo.make(state=9,county="*",county.subdivision="*"), table.number="B19013", col.names="pretty")
# shorten town names
# geography(table name full)[,1]=str_replace(geography(table name full)[,1]," town.*","")
geography(townmedianincfull)[,1]=str_replace(geography(townmedianincfull)[,1]," town.*","")
# delete county subdivisions undefined
# table name = table name full[c(2:79,81:95,97:123,125:173),]
townmedianinc<-townmedianincfull[c(2:79,81:95,97:123,125:173),]
GNHmedianinc<-acs.fetch(2013, 5, geography=GNH, table.number="B19013", col.names="pretty")
GWBmedianinc<-acs.fetch(2013, 5, geography=GWB, table.number="B19013", col.names="pretty")
Valleymedianinc<-acs.fetch(2013, 5, geography=Valley, table.number="B19013", col.names="pretty")
FCmedianinc<-acs.fetch(2013, 5, geography=geo.make(state=9, county=1), table.number="B19013", col.names="pretty")
HCmedianinc<-acs.fetch(2013, 5, geography=geo.make(state=9, county=3), table.number="B19013", col.names="pretty")
LCmedianinc<-acs.fetch(2013, 5, geography=geo.make(state=9, county=5), table.number="B19013", col.names="pretty")
MCmedianinc<-acs.fetch(2013, 5, geography=geo.make(state=9, county=7), table.number="B19013", col.names="pretty")
NHCmedianinc<-acs.fetch(2013, 5, geography=geo.make(state=9, county=9), table.number="B19013", col.names="pretty")
NLCmedianinc<-acs.fetch(2013, 5, geography=geo.make(state=9, county=11), table.number="B19013", col.names="pretty")
TCmedianinc<-acs.fetch(2013, 5, geography=geo.make(state=9, county=13), table.number="B19013", col.names="pretty")
WCmedianinc<-acs.fetch(2013, 5, geography=geo.make(state=9, county=15), table.number="B19013", col.names="pretty")
Valleymedianinc
GNHmedianinc
NHmedianinc
NLCmedianinc
NHCmedianinc
GWBmedianinc
CTmedianinc
acs.fetch(2013, 5, geography=Valley.towns, table.number="B19013", col.names="pretty")
regionA <- rbind(CTmedianinc, FCmedianinc)
regionB <- rbind(HCmedianinc, LCmedianinc)
regionC <- rbind(MCmedianinc, NHCmedianinc)
regionD <- rbind(NLCmedianinc,TCmedianinc)
regionE <- WCmedianinc
regionAA <- rbind(regionA, regionB)
regionBB <- rbind(regionC, regionD)
regionCC <- regionE
regionAAA <-rbind(regionAA, regionBB)
regionAAAA <-rbind(regionAAA,regionCC)
# Merge town and CT data
allmedianinc<-rbind(regionAAAA, townmedianinc)
head(medianinc)
head(medianinc)
head(allmedianinc)
# TOTAL POVERTY
# fetch ACS data
CTpoverty<-acs.fetch(2013, 5, geography=geo.make(state=9), table.number="C17002", col.names="pretty")
# table name full = acs.fetch(endyear, 5, geography=geomake(state=9,county="*",county.subdivision="*"), table.number="XXX", col.names="pretty")
totalpovertyfull<-acs.fetch(2013, 5, geography=geo.make(state=9,county="*",county.subdivision="*"), table.number="C17002", col.names="pretty")
# shorten town names
# geography(table name full)[,1]=str_replace(geography(table name full)[,1]," town.*","")
geography(totalpovertyfull)[,1]=str_replace(geography(totalpovertyfull)[,1]," town.*","")
# delete county subdivisions undefined
# table name = table name full[c(2:79,81:95,97:123,125:173),]
townpoverty<-totalpovertyfull[c(2:79,81:95,97:123,125:173),]
GNHpoverty<-acs.fetch(2013, 5, geography=GNH, table.number="C17002", col.names="pretty")
GWBpoverty<-acs.fetch(2013, 5, geography=GWB, table.number="C17002", col.names="pretty")
Valleypoverty<-acs.fetch(2013, 5, geography=Valley, table.number="C17002", col.names="pretty")
FCpoverty<-acs.fetch(2013, 5, geography=geo.make(state=9, county=1), table.number="C17002", col.names="pretty")
HCpoverty<-acs.fetch(2013, 5, geography=geo.make(state=9, county=3), table.number="C17002", col.names="pretty")
LCpoverty<-acs.fetch(2013, 5, geography=geo.make(state=9, county=5), table.number="C17002", col.names="pretty")
MCpoverty<-acs.fetch(2013, 5, geography=geo.make(state=9, county=7), table.number="C17002", col.names="pretty")
NHCpoverty<-acs.fetch(2013, 5, geography=geo.make(state=9, county=9), table.number="C17002", col.names="pretty")
NLCpoverty<-acs.fetch(2013, 5, geography=geo.make(state=9, county=11), table.number="C17002", col.names="pretty")
TCpoverty<-acs.fetch(2013, 5, geography=geo.make(state=9, county=13), table.number="C17002", col.names="pretty")
WCpoverty<-acs.fetch(2013, 5, geography=geo.make(state=9, county=15), table.number="C17002", col.names="pretty")
regionA <- rbind(CTpoverty, GNHpoverty)
regionB <- rbind(GWBpoverty, Valleypoverty)
regionC <- rbind(FCpoverty, HCpoverty)
regionD <- rbind(LCpoverty, MCpoverty)
regionE <- rbind(NHCpoverty, NLCpoverty)
regionF <- rbind(TCpoverty, WCpoverty)
regionAA <- rbind(regionA, regionB)
regionBB <- rbind(regionC, regionD)
regionCC <- rbind(regionE, regionF)
regionAAA <-rbind(regionAA, regionBB)
regionAAAA <-rbind(regionAAA,regionCC)
# Merge town and CT data
allpoverty<-rbind(regionAAAA, townpoverty)
head(allpoverty, 20)
# Calculate total poverty per town
CTtotalpovA=apply(X=allpoverty[,c(2:3)], FUN=sum, MARGIN=2, agg.term="TotalPoverty")
CTpctpovA=divide.acs(numerator=CTtotalpovA, denominator=allpoverty[,1], method="proportion")
PovstatusA=apply(X=allpoverty[,c(1)], FUN=sum, MARGIN=2, agg.term="Total, Poverty status determined")
CTtotalpovA
CTpctpovA
totalpovertyfull<-acs.fetch(2013, 5, geography=geo.make(state=9,county="*",county.subdivision="*"), table.number="C17002", col.names="pretty")
head(totalpovertyfull)
FCpoverty<-acs.fetch(2013, 5, geography=geo.make(state=9, county=1), table.number="C17002", col.names="pretty")
FCpoverty
geography(FCpoverty)[,1]=str_replace(geography(totalpovertyfull)[,1]," County.*","")
geography(FCpoverty)[,1]=str_replace(geography(FCpoverty)[,1]," County.*","")
FCpoverty
geography(FCpoverty)[,1]=str_replace(geography(FCpoverty)[,1]," .*","")
FCpoverty
geography(FCpoverty)[,1]=str_replace(geography(FCpoverty)[,1]," County.*","County")
FCpoverty
geography(FCpoverty)[,1]=str_replace(geography(FCpoverty)[,1]," County.*","County")
FCpoverty
geography(FCpoverty)[,1]=str_replace(geography(FCpoverty)[,1]," County.*"," County")
FCpoverty
FCpoverty<-acs.fetch(2013, 5, geography=geo.make(state=9, county=1), table.number="C17002", col.names="pretty")
# fetch ACS data
CT2xpov<-acs.fetch(2013, 5, geography=geo.make(state=9), table.number="C17002", col.names="pretty")
# table name full = acs.fetch(endyear, 5, geography=geomake(state=9,county="*",county.subdivision="*"), table.number="XXX", col.names="pretty")
total2xpovfull<-acs.fetch(2013, 5, geography=geo.make(state=9,county="*",county.subdivision="*"), table.number="C17002", col.names="pretty")
# shorten town names
# geography(table name full)[,1]=str_replace(geography(table name full)[,1]," town.*","")
geography(total2xpovfull)[,1]=str_replace(geography(total2xpovfull)[,1]," town.*","")
# delete county subdivisions undefined
# table name = table name full[c(2:79,81:95,97:123,125:173),]
total2xpov<-total2xpovfull[c(2:79,81:95,97:123,125:173),]
GNH2xpov<-acs.fetch(2013, 5, geography=GNH, table.number="C17002", col.names="pretty")
GWB2xpov<-acs.fetch(2013, 5, geography=GWB, table.number="C17002", col.names="pretty")
Valley2xpov<-acs.fetch(2013, 5, geography=Valley, table.number="C17002", col.names="pretty")
FC2xpov<-acs.fetch(2013, 5, geography=geo.make(state=9, county=1), table.number="C17002", col.names="pretty")
HC2xpov<-acs.fetch(2013, 5, geography=geo.make(state=9, county=3), table.number="C17002", col.names="pretty")
LC2xpov<-acs.fetch(2013, 5, geography=geo.make(state=9, county=5), table.number="C17002", col.names="pretty")
MC2xpov<-acs.fetch(2013, 5, geography=geo.make(state=9, county=7), table.number="C17002", col.names="pretty")
NHC2xpov<-acs.fetch(2013, 5, geography=geo.make(state=9, county=9), table.number="C17002", col.names="pretty")
NLC2xpov<-acs.fetch(2013, 5, geography=geo.make(state=9, county=11), table.number="C17002", col.names="pretty")
TC2xpov<-acs.fetch(2013, 5, geography=geo.make(state=9, county=13), table.number="C17002", col.names="pretty")
WC2xpov<-acs.fetch(2013, 5, geography=geo.make(state=9, county=15), table.number="C17002", col.names="pretty")
regionA <- rbind(CT2xpov, GNH2xpov)
regionB <- rbind(GWB2xpov, Valley2xpov)
regionC <- rbind(FC2xpov, HC2xpov)
regionD <- rbind(LC2xpov, MC2xpov)
regionE <- rbind(NHC2xpov, NLC2xpov)
regionF <- rbind(TC2xpov, WC2xpov)
regionAA <- rbind(regionA, regionB)
regionBB <- rbind(regionC, regionD)
regionCC <- rbind(regionE, regionF)
regionAAA <-rbind(regionAA, regionBB)
regionAAAA <-rbind(regionAAA,regionCC)
# Merge town and CT data
all2xpov<-rbind(regionAAAA, total2xpov)
# Calculate total 2xpov per town
CTtotal1to2xpovA=apply(X=all2xpov[,c(4:7)], FUN=sum, MARGIN=2, agg.term="Total2xpov")
CTpct1to2xpovA=apply(X=all2xpov[,c(2:7)], FUN=sum, MARGIN=2, agg.term="Total1to2xpov")
head(CTpct1to2xpovA)
CTpct1to2xpovA=divide.acs(numerator=CTtotal1to2xpovA, denominator=all2xpov[,1], method="proportion")
head(CTpct1to2xpovA)
# In Poverty and Low Income, 0 to 17
# fetch ACS CT data
# table name full = acs.fetch(endyear, 5, geography=geomake(state=9,county="*",county.subdivision="*"), table.number="XXX", col.names="pretty")
CT18Inc<-acs.fetch(2013, 5, geography=geo.make(state=9), table.number="B17024", col.names="pretty")
# fetch ACS town data
town18Incfull<-acs.fetch(2013, 5, geography=geo.make(state=9,county="*",county.subdivision="*"), table.number="B17024", col.names="pretty")
# shorten town names
# geography(table name full)[,1]=str_replace(geography(table name full)[,1]," town.*","")
geography(town18Incfull)[,1]=str_replace(geography(town18Incfull)[,1]," town.*","")
# delete county subdivisions undefined
# table name = table name full[c(2:79,81:95,97:123,125:173),]
town18Inc<-town18Incfull[c(2:79,81:95,97:123,125:173),]
GNH18Inc<-acs.fetch(2013, 5, geography=GNH, table.number="B17024", col.names="pretty")
GWB18Inc<-acs.fetch(2013, 5, geography=GWB, table.number="B17024", col.names="pretty")
Valley18Inc<-acs.fetch(2013, 5, geography=Valley, table.number="B17024", col.names="pretty")
FC18Inc<-acs.fetch(2013, 5, geography=geo.make(state=9, county=1), table.number="B17024", col.names="pretty")
HC18Inc<-acs.fetch(2013, 5, geography=geo.make(state=9, county=3), table.number="B17024", col.names="pretty")
LC18Inc<-acs.fetch(2013, 5, geography=geo.make(state=9, county=5), table.number="B17024", col.names="pretty")
MC18Inc<-acs.fetch(2013, 5, geography=geo.make(state=9, county=7), table.number="B17024", col.names="pretty")
NHC18Inc<-acs.fetch(2013, 5, geography=geo.make(state=9, county=9), table.number="B17024", col.names="pretty")
NLC18Inc<-acs.fetch(2013, 5, geography=geo.make(state=9, county=11), table.number="B17024", col.names="pretty")
TC18Inc<-acs.fetch(2013, 5, geography=geo.make(state=9, county=13), table.number="B17024", col.names="pretty")
WC18Inc<-acs.fetch(2013, 5, geography=geo.make(state=9, county=15), table.number="B17024", col.names="pretty")
regionA <- rbind(CT18Inc, GNH18Inc)
regionB <- rbind(GWB18Inc, Valley18Inc)
regionC <- rbind(FC18Inc, HC18Inc)
regionD <- rbind(LC18Inc, MC18Inc)
regionE <- rbind(NHC18Inc, NLC18Inc)
regionF <- rbind(TC18Inc, WC18Inc)
regionAA <- rbind(regionA, regionB)
regionBB <- rbind(regionC, regionD)
regionCC <- rbind(regionE, regionF)
regionAAA <-rbind(regionAA, regionBB)
regionAAAA <-rbind(regionAAA,regionCC)
# Merge town and CT data
all18Inc<-rbind(regionAAAA, total18Inc)
# Merge town and CT data
all18inc<-rbind(CT18Inc, town18Inc)
# Calculate population per age group per town
plus18A <-apply(X=all18inc[,c(2,15,28)], FUN=sum, MARGIN=2, agg.term="Undre 18")
pov18A=apply(X=all18inc[,c(3:5,16:18,29:31)], FUN=sum, MARGIN=2, agg.term="Poverty Under 18")
lowinc18A=apply(X=all18inc[,c(3:10,16:23,29:36)], FUN=sum, MARGIN=2, agg.term="Low Income Under 18")
# Calculate pct of population per age group per town
Pct18plusPovertyA=divide.acs(numerator=pov18A, denominator=plus18A, method="proportion")
Pct18plusLowincA=divide.acs(numerator=lowinc18A, denominator=plus18A, method="proportion")
# In Poverty and Low Income, 65 and older
# fetch ACS CT data
# table name full = acs.fetch(endyear, 5, geography=geomake(state=9,county="*",county.subdivision="*"), table.number="XXX", col.names="pretty")
CT65Inc<-acs.fetch(2013, 5, geography=geo.make(state=9), table.number="B17024", col.names="pretty")
# fetch ACS town data
town65Incfull<-acs.fetch(2013, 5, geography=geo.make(state=9,county="*",county.subdivision="*"), table.number="B17024", col.names="pretty")
# shorten town names
# geography(table name full)[,1]=str_replace(geography(table name full)[,1]," town.*","")
geography(town65Incfull)[,1]=str_replace(geography(town65Incfull)[,1]," town.*","")
# delete county subdivisions undefined
# table name = table name full[c(2:79,81:95,97:123,125:173),]
town65Inc<-town65Incfull[c(2:79,81:95,97:123,125:173),]
GNH65Inc<-acs.fetch(2013, 5, geography=GNH, table.number="B17024", col.names="pretty")
GWB65Inc<-acs.fetch(2013, 5, geography=GWB, table.number="B17024", col.names="pretty")
Valley65Inc<-acs.fetch(2013, 5, geography=Valley, table.number="B17024", col.names="pretty")
FC65Inc<-acs.fetch(2013, 5, geography=geo.make(state=9, county=1), table.number="B17024", col.names="pretty")
HC65Inc<-acs.fetch(2013, 5, geography=geo.make(state=9, county=3), table.number="B17024", col.names="pretty")
LC65Inc<-acs.fetch(2013, 5, geography=geo.make(state=9, county=5), table.number="B17024", col.names="pretty")
MC65Inc<-acs.fetch(2013, 5, geography=geo.make(state=9, county=7), table.number="B17024", col.names="pretty")
NHC65Inc<-acs.fetch(2013, 5, geography=geo.make(state=9, county=9), table.number="B17024", col.names="pretty")
NLC65Inc<-acs.fetch(2013, 5, geography=geo.make(state=9, county=11), table.number="B17024", col.names="pretty")
TC65Inc<-acs.fetch(2013, 5, geography=geo.make(state=9, county=13), table.number="B17024", col.names="pretty")
WC65Inc<-acs.fetch(2013, 5, geography=geo.make(state=9, county=15), table.number="B17024", col.names="pretty")
regionA <- rbind(CT65Inc, GNH65Inc)
regionB <- rbind(GWB65Inc, Valley65Inc)
regionC <- rbind(FC65Inc, HC65Inc)
regionD <- rbind(LC65Inc, MC65Inc)
regionE <- rbind(NHC65Inc, NLC65Inc)
regionF <- rbind(TC65Inc, WC65Inc)
regionAA <- rbind(regionA, regionB)
regionBB <- rbind(regionC, regionD)
regionCC <- rbind(regionE, regionF)
regionAAA <-rbind(regionAA, regionBB)
regionAAAA <-rbind(regionAAA,regionCC)
# Merge town and CT data
all65Inc<-rbind(regionAAAA, town65Inc)
all65inc <- all65Incexpand[,c(106:131)]
# Calculate population per age group per town
plus65A <-apply(X=all65inc[,c(1,14)], FUN=sum, MARGIN=2, agg.term="65 and over")
pov65A=apply(X=all65inc[,c(2:4,15:17)], FUN=sum, MARGIN=2, agg.term="Poverty 65 and over")
lowinc65A=apply(X=all65inc[,c(2:9,15:22)], FUN=sum, MARGIN=2, agg.term="Low Income 65 and over")
# Calculate pct of population per age group per town
Pct65plusPovertyA=divide.acs(numerator=pov65A, denominator=plus65A, method="proportion")
Pct65plusLowincA=divide.acs(numerator=lowinc65A, denominator=plus65A, method="proportion")
