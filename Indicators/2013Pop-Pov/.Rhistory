library(plyr)
library(reshape2)
library(dplyr)
sde <- read.csv("enrollment03-12.csv", header=TRUE, stringsAsFactors=FALSE, strip.white=TRUE, nrows=2102, na.strings="-")
install.packages("acs")
install.packages("stringr")
library(acs)
library(stringr)
api.key.install(key="61a6ec2a084f67119446589d66b12b702106746b")
# fetch ACS data
# table name full = acs.fetch(endyear, 5, geography=geomake(state=9,county="*",county.subdivision="*"), table.number="XXX", col.names="pretty")
citizenshipfull=acs.fetch(2013, 5, geography=geo.make(state=9,county="*",county.subdivision="*"), table.number="B05001", col.names="pretty")
# shorten town names
# geography(table name full)[,1]=str_replace(geography(table name full)[,1]," town.*","")
geography(citizenshipfull)[,1]=str_replace(geography(citizenshipfull)[,1]," town.*","")
# delete county subdivisions undefined
# table name = table name full[c(2:79,81:95,97:123,125:173),]
citizenship=citizenshipfull[c(2:79,81:95,97:123,125:173),]
# summing Census columns into our indicators
immigrant=apply(X=citizenship[,c(5:6)], FUN=sum, MARGIN=2, agg.term="Immigrant")
citizen=apply(X=citizenship[,c(2:4)], FUN=sum, MARGIN=2, agg.term="Citizen")
PctImmigrant=divide.acs(numerator=immigrant, denominator=citizenship[,1], method="proportion")
PctNaturalized=divide.acs(numerator=citizenship[,5], denominator=citizenship[,1], method="proportion")
PctNonCitizen=divide.acs(numerator=citizenship[,6], denominator=citizenship[,1], method="proportion")
PctCitizen=divide.acs(numerator=citizen, denominator=citizenship[,1], method="proportion")
citizenship$Total=citizenship[,1]
library(acs)
library(stringr)
api.key.install(key="61a6ec2a084f67119446589d66b12b702106746b")
# fetch ACS data
# table name full = acs.fetch(endyear, 5, geography=geomake(state=9,county="*",county.subdivision="*"), table.number="XXX", col.names="pretty")
total2xpovfull<-acs.fetch(2013, 5, geography=geo.make(state=9,county="*",county.subdivision="*"), table.number="C17002", col.names="pretty")
# shorten town names
# geography(table name full)[,1]=str_replace(geography(table name full)[,1]," town.*","")
geography(total2xpovfull)[,1]=str_replace(geography(total2xpovfull)[,1]," town.*","")
dim(total2xpovfull)
# table name = table name full[c(2:79,81:95,97:123,125:173),]
total2xpov<-total2xpovfull[c(2:79,81:95,97:123,125:173),]
town1to2xFPL=apply(X=total2xpov[,c(4:7)], FUN=sum, MARGIN=2, agg.term="Total1to2xFPL")
pct1to2xFPL=divide.acs(numerator=town1to2xFPL, denominator=total2xpov[,1], method="proportion")
CTtotal2xpov<-acs.fetch(2013, 5, geography=geo.make(state=9), table.number="C17002", col.names="pretty")
CT1to2xpov=apply(X=CTtotal2xpov[,c(4:7)], FUN=sum, MARGIN=2, agg.term="Total1to2xpov")
CTpct1to2xpov=divide.acs(numerator=CT1to2xpov, denominator=CTtotal2xpov[,1], method="proportion")
CTtotal2xpovfull<-rbind(CTpct1to2xFPL, pct1to2xpov)
CTtotal2xpovfull<-rbind(CTpct1to2xpov, pct1to2xpov)
town1to2xpov=apply(X=total2xpov[,c(4:7)], FUN=sum, MARGIN=2, agg.term="Total1to2xFPL")
pct1to2xpov=divide.acs(numerator=town1to2xpov, denominator=total2xpov[,1], method="proportion")
# Fetch CT state data and calculate pct
CTtotal2xpov<-acs.fetch(2013, 5, geography=geo.make(state=9), table.number="C17002", col.names="pretty")
CT1to2xpov=apply(X=CTtotal2xpov[,c(4:7)], FUN=sum, MARGIN=2, agg.term="Total1to2xpov")
CTpct1to2xpov=divide.acs(numerator=CT1to2xpov, denominator=CTtotal2xpov[,1], method="proportion")
CTtotal2xpovfull<-rbind(CTpct1to2xpov, pct1to2xpov)
# Calculate pct per town
town1to2xpov=apply(X=total2xpov[,c(4:7)], FUN=sum, MARGIN=2, agg.term="Total1to2xpov")
pct1to2xpov=divide.acs(numerator=town1to2xpov, denominator=total2xpov[,1], method="proportion")
# Fetch CT state data and calculate pct
CTtotal2xpov<-acs.fetch(2013, 5, geography=geo.make(state=9), table.number="C17002", col.names="pretty")
CT1to2xpov=apply(X=CTtotal2xpov[,c(4:7)], FUN=sum, MARGIN=2, agg.term="Total1to2xpov")
CTpct1to2xpov=divide.acs(numerator=CT1to2xpov, denominator=CTtotal2xpov[,1], method="proportion")
CTtotal2xpovfull<-rbind(CTpct1to2xpov, pct1to2xpov)
CTpct1to2xpovfull<-rbind(CTpct1to2xpov, pct1to2xpov)
head(CTpct1to2xpovfull)
CTpct1to2xpov<-data.frame(Pct1to2xpov=estimate(CTpct1to2xpovfull), ME90=1.645*standard.error(CTpct1to2xpovfull))
CTpct1to2xpov[,c(2:3)]<-CTpct1to2xpov[,c(1:2)]
CTpct1to2xpov[,1]<-rownames(CTpct1to2xpov)
colnames(CTpct1to2xpov)<-c("Town", "Pct Population 1-2x FPL Level", "90% MoE")
write.csv(CTtotal2xpov, "2013_Connecticut_towns_Pct_Population_1to2xFPL.csv", row.names=F)
write.csv(CTpct1to2xpov, "2013_Connecticut_towns_Pct_Population_1to2xFPL.csv", row.names=F)
setwd("~/Desktop/RCensus13")
library(acs)
library(stringr)
api.key.install(key="61a6ec2a084f67119446589d66b12b702106746b")
# fetch ACS data
# table name full = acs.fetch(endyear, 5, geography=geomake(state=9,county="*",county.subdivision="*"), table.number="XXX", col.names="pretty")
totalchildpovertyfull<-acs.fetch(2013, 5, geography=geo.make(state=9,county="*",county.subdivision="*"), table.number="B17024", col.names="pretty")
# shorten town names
# geography(table name full)[,1]=str_replace(geography(table name full)[,1]," town.*","")
geography(totalchildpovertyfull)[,1]=str_replace(geography(totalchildpovertyfull)[,1]," town.*","")
# delete county subdivisions undefined
# table name = table name full[c(2:79,81:95,97:123,125:173),]
totalchildpoverty<-totalchildpovertyfull[c(2:79,81:95,97:123,125:173),]
warnings()
acs.colnames(totalchildpoverty)
townchildpoverty=apply(X=totalchildpoverty[,c(3:5,16:18,29:31)], FUN=sum, MARGIN=2, agg.term="Totalchildpoverty")
head(townchildpoverty)
dim(townchildpoverty)
CTtotalchildpoverty<-acs.fetch(2013, 5, geography=geo.make(state=9), table.number="B17024", col.names="pretty")
CTchildpoverty=apply(X=CTtotalchildpoverty[,c(3:5,16:18,29:31)], FUN=sum, MARGIN=2, agg.term="Totalchildpoverty")
CTtotalchildpovfull<-rbind(CTchildpoverty, townchildpoverty)
CTtotalchildpov<-data.frame(Totalchildpoverty=estimate(CTtotalchildpovfull), ME90=1.645*standard.error(CTtotalchildpovfull))
CTtotalchildpov[,c(2:3)]<-CTtotalchildpov[,c(1:2)]
CTtotalchildpov[,1]<-rownames(CTtotalchildpov)
colnames(CTtotalchildpov)<-c("Town", "Total Population Under 18 below childpoverty Level", "90% MoE")
dim(CTtotalchildpov)
head(CTtotalchildpov)
write.csv(CTtotalchildpov, "2013_Connecticut_towns_Total_Child_Population_childpoverty.csv", row.names=F)
library(acs)
library(stringr)
api.key.install(key="61a6ec2a084f67119446589d66b12b702106746b")
# fetch ACS data
# table name full = acs.fetch(endyear, 5, geography=geomake(state=9,county="*",county.subdivision="*"), table.number="XXX", col.names="pretty")
totalchildpovertyfull<-acs.fetch(2013, 5, geography=geo.make(state=9,county="*",county.subdivision="*"), table.number="B17024", col.names="pretty")
# shorten town names
# geography(table name full)[,1]=str_replace(geography(table name full)[,1]," town.*","")
geography(totalchildpovertyfull)[,1]=str_replace(geography(totalchildpovertyfull)[,1]," town.*","")
# delete county subdivisions undefined
# table name = table name full[c(2:79,81:95,97:123,125:173),]
totalchildpoverty<-totalchildpovertyfull[c(2:79,81:95,97:123,125:173),]
# Calculate total childpoverty per town
townchildpoverty=apply(X=totalchildpoverty[,c(3:5,16:18,29:31)], FUN=sum, MARGIN=2, agg.term="Totalchildpoverty")
pctchildpoverty=divide.acs(numerator=townchildpoverty, denominator=totaltownchildpoverty[,1], method="proportion")
head(pctchildpoverty)
# delete county subdivisions undefined
# table name = table name full[c(2:79,81:95,97:123,125:173),]
totalchildpoverty<-totalchildpovertyfull[c(2:79,81:95,97:123,125:173),]
# Calculate total childpoverty per town
townchildpoverty=apply(X=totalchildpoverty[,c(3:5,16:18,29:31)], FUN=sum, MARGIN=2, agg.term="Totalchildpoverty")
pctchildpoverty=divide.acs(numerator=townchildpoverty, denominator=totalchildpoverty[,1], method="proportion")
CTtotalchildpoverty<-acs.fetch(2013, 5, geography=geo.make(state=9), table.number="B17024", col.names="pretty")
CTchildpoverty=apply(X=CTtotalchildpoverty[,c(3:5,16:18,29:31)], FUN=sum, MARGIN=2, agg.term="Totalchildpoverty")
CTpctchildpoverty=divide.acs(numerator=CTchildpoverty, denominator=CTtotalchildpoverty[,1], method="proportion")
CTtotalchildpovfull<-rbind(CTpctchildpoverty, pctchildpoverty)
head(CTtotalchildpovfull)
townchildpoverty=apply(X=totalchildpoverty[,c(3:5,16:18,29:31)], FUN=sum, MARGIN=2, agg.term="Totalchildpoverty")
townchild=apply(X=totalchildpoverty[,c(2,15,28)], FUN=sum, MARGIN=2, agg.term="Totalchild")
pctchildpoverty=divide.acs(numerator=townchildpoverty, denominator=townchild, method="proportion")
# Fetch CT state data and calculate total childpoverty
CTtotalchildpoverty<-acs.fetch(2013, 5, geography=geo.make(state=9), table.number="B17024", col.names="pretty")
CTtotalchildpoverty<-acs.fetch(2013, 5, geography=geo.make(state=9), table.number="B17024", col.names="pretty")
CTchild=apply(X=CTtotalchildpoverty[,c(2,15,28)], FUN=sum, MARGIN=2, agg.term="Totalchild")
CTchildpoverty=apply(X=CTtotalchildpoverty[,c(3:5,16:18,29:31)], FUN=sum, MARGIN=2, agg.term="Totalchildpoverty")
CTpctchildpoverty=divide.acs(numerator=CTchildpoverty, denominator=CTchild, method="proportion")
CTtotalchildpovfull<-rbind(CTpctchildpoverty, pctchildpoverty)
head(CTtotalchildpovfull)
CTtotalchildpov<-data.frame(Totalchildpoverty=estimate(CTtotalchildpovfull), ME90=1.645*standard.error(CTtotalchildpovfull))
CTtotalchildpov[,c(2:3)]<-CTtotalchildpov[,c(1:2)]
CTtotalchildpov[,1]<-rownames(CTtotalchildpov)
colnames(CTtotalchildpov)<-c("Town", "Pct Population Under 18 below poverty Level", "90% MoE")
head(CTtotalchildpov)
write.csv(CTtotalchildpov, "2013_Connecticut_towns_pct_Child_Population_poverty.csv", row.names=F)
library(acs)
library(stringr)
api.key.install(key="61a6ec2a084f67119446589d66b12b702106746b")
# fetch ACS data
# table name full = acs.fetch(endyear, 5, geography=geomake(state=9,county="*",county.subdivision="*"), table.number="XXX", col.names="pretty")
totalchildlowincfull<-acs.fetch(2013, 5, geography=geo.make(state=9,county="*",county.subdivision="*"), table.number="B17024", col.names="pretty")
# shorten town names
# geography(table name full)[,1]=str_replace(geography(table name full)[,1]," town.*","")
geography(totalchildlowincfull)[,1]=str_replace(geography(totalchildlowincfull)[,1]," town.*","")
# delete county subdivisions undefined
# table name = table name full[c(2:79,81:95,97:123,125:173),]
totalchildlowinc<-totalchildlowincfull[c(2:79,81:95,97:123,125:173),]
acs.colnames(totalchildlowinc)
# Calculate total child low inc per town
townchildlowinc=apply(X=totalchildlowincfull[,c(3:10,16:23,29:36)], FUN=sum, MARGIN=2, agg.term="Totalchildlowinc")
# Fetch CT state data and calculate total child low inc
CTtotalchildlowinc<-acs.fetch(2013, 5, geography=geo.make(state=9), table.number="B17024", col.names="pretty")
CTchildlowinc=apply(X=CTtotalchildpoverty[,c(3:10,16:23,29:36)], FUN=sum, MARGIN=2, agg.term="Totalchildlowinc")
CTtotalchildlowincfull<-rbind(CTchildlowinc, townchildlowinc)
head(CTtotalchildlowincfull)
CTtotalchildlowinc<-data.frame(Totalchildlowinc=estimate(CTtotalchildlowincfull), ME90=1.645*standard.error(CTtotalchildlowincfull))
CTtotalchildlowinc[,c(2:3)]<-CTtotalchildlowinc[,c(1:2)]
CTtotalchildlowinc[,1]<-rownames(CTtotalchildlowinc)
colnames(CTtotalchildlowinc)<-c("Town", "Total Population Under 18 below 200% FPL", "90% MoE")
write.csv(CTtotalchildpov, "2013_Connecticut_towns_Total_Child_Population_below_200_FPL.csv", row.names=F)
library(acs)
library(stringr)
api.key.install(key="61a6ec2a084f67119446589d66b12b702106746b")
# fetch ACS data
# table name full = acs.fetch(endyear, 5, geography=geomake(state=9,county="*",county.subdivision="*"), table.number="XXX", col.names="pretty")
totalchildlowincfull<-acs.fetch(2013, 5, geography=geo.make(state=9,county="*",county.subdivision="*"), table.number="B17024", col.names="pretty")
# shorten town names
# geography(table name full)[,1]=str_replace(geography(table name full)[,1]," town.*","")
geography(totalchildlowincfull)[,1]=str_replace(geography(totalchildlowincfull)[,1]," town.*","")
# delete county subdivisions undefined
# table name = table name full[c(2:79,81:95,97:123,125:173),]
totalchildlowinc<-totalchildlowincfull[c(2:79,81:95,97:123,125:173),]
# Calculate total child low inc per town
townchildlowinc=apply(X=totalchildlowincfull[,c(3:10,16:23,29:36)], FUN=sum, MARGIN=2, agg.term="Totalchildlowinc")
townchild=apply(X=totalchildlowinc[,c(2,15,28)], FUN=sum, MARGIN=2, agg.term="Totalchild")
pctchildlowinc=divide.acs(numerator=townchildlowinc, denominator=townchild, method="proportion")
# Fetch CT state data and calculate total child low inc
CTtotalchildlowinc<-acs.fetch(2013, 5, geography=geo.make(state=9), table.number="B17024", col.names="pretty")
CTchildlowinc=apply(X=CTtotalchildlowinc[,c(3:10,16:23,29:36)], FUN=sum, MARGIN=2, agg.term="Totalchildlowinc")
CTchild=apply(X=CTtotalchildlowinc[,c(2,15,28)], FUN=sum, MARGIN=2, agg.term="Totalchild")
CTpctchildlowinc=divide.acs(numerator=CTchildlowinc, denominator=CTchild, method="proportion")
CTpctchildlowincfull<-rbind(CTpctchildlowinc, pctchildlowinc)
CTpctchildlowinc<-data.frame(Totalchildlowinc=estimate(CTpctchildlowincfull), ME90=1.645*standard.error(CTpctchildlowincfull))
CTpctchildlowinc[,c(2:3)]<-CTpctchildlowinc[,c(1:2)]
CTpctchildlowinc[,1]<-rownames(CTpctchildlowinc)
colnames(CTpctchildlowinc)<-c("Town", "Pct Population Under 18 below 200% FPL", "90% MoE")
write.csv(CTtotalchildpov, "2013_Connecticut_towns_Pct_Child_Population_below_200_FPL.csv", row.names=F)
totalchildlowincfull<-acs.fetch(2013, 5, geography=geo.make(state=9,county="*",county.subdivision="*"), table.number="B17024", col.names="pretty")
# shorten town names
# geography(table name full)[,1]=str_replace(geography(table name full)[,1]," town.*","")
geography(totalchildlowincfull)[,1]=str_replace(geography(totalchildlowincfull)[,1]," town.*","")
# delete county subdivisions undefined
# table name = table name full[c(2:79,81:95,97:123,125:173),]
totalchildlowinc<-totalchildlowincfull[c(2:79,81:95,97:123,125:173),]
# Calculate total child low inc per town
townchildlowinc=apply(X=totalchildlowincfull[,c(3:10,16:23,29:36)], FUN=sum, MARGIN=2, agg.term="Totalchildlowinc")
townchild=apply(X=totalchildlowinc[,c(2,15,28)], FUN=sum, MARGIN=2, agg.term="Totalchild")
pctchildlowinc=divide.acs(numerator=townchildlowinc, denominator=townchild, method="proportion")
pctchildlowinc
dim(townchildlowinc)
dim(townchild)
library(acs)
library(stringr)
api.key.install(key="61a6ec2a084f67119446589d66b12b702106746b")
# fetch ACS data
# table name full = acs.fetch(endyear, 5, geography=geomake(state=9,county="*",county.subdivision="*"), table.number="XXX", col.names="pretty")
totalchildlowincfull<-acs.fetch(2013, 5, geography=geo.make(state=9,county="*",county.subdivision="*"), table.number="B17024", col.names="pretty")
# shorten town names
# geography(table name full)[,1]=str_replace(geography(table name full)[,1]," town.*","")
geography(totalchildlowincfull)[,1]=str_replace(geography(totalchildlowincfull)[,1]," town.*","")
# delete county subdivisions undefined
# table name = table name full[c(2:79,81:95,97:123,125:173),]
totalchildlowinc<-totalchildlowincfull[c(2:79,81:95,97:123,125:173),]
# Calculate total child low inc per town
townchildlowinc=apply(X=totalchildlowincfull[,c(3:10,16:23,29:36)], FUN=sum, MARGIN=2, agg.term="Totalchildlowinc")
townchild=apply(X=totalchildlowinc[,c(2,15,28)], FUN=sum, MARGIN=2, agg.term="Totalchild")
pctchildlowinc=divide.acs(numerator=townchildlowinc, denominator=townchild, method="proportion")
townchildlowinc=apply(X=totalchildlowinc[,c(3:10,16:23,29:36)], FUN=sum, MARGIN=2, agg.term="Totalchildlowinc")
townchild=apply(X=totalchildlowinc[,c(2,15,28)], FUN=sum, MARGIN=2, agg.term="Totalchild")
pctchildlowinc=divide.acs(numerator=townchildlowinc, denominator=townchild, method="proportion")
CTtotalchildlowinc<-acs.fetch(2013, 5, geography=geo.make(state=9), table.number="B17024", col.names="pretty")
CTchildlowinc=apply(X=CTtotalchildlowinc[,c(3:10,16:23,29:36)], FUN=sum, MARGIN=2, agg.term="Totalchildlowinc")
CTchild=apply(X=CTtotalchildlowinc[,c(2,15,28)], FUN=sum, MARGIN=2, agg.term="Totalchild")
CTpctchildlowinc=divide.acs(numerator=CTchildlowinc, denominator=CTchild, method="proportion")
CTpctchildlowinc<-data.frame(Totalchildlowinc=estimate(CTpctchildlowincfull), ME90=1.645*standard.error(CTpctchildlowincfull))
CTpctchildlowinc[,c(2:3)]<-CTpctchildlowinc[,c(1:2)]
CTpctchildlowinc[,1]<-rownames(CTpctchildlowinc)
colnames(CTpctchildlowinc)<-c("Town", "Pct Population Under 18 below 200% FPL", "90% MoE")
CTpctchildlowinc<-data.frame(Totalchildlowinc=estimate(CTpctchildlowincfull), ME90=1.645*standard.error(CTpctchildlowincfull))
CTpctchildlowincfull<-rbind(CTpctchildlowinc, pctchildlowinc)
CTpctchildlowinc<-data.frame(Totalchildlowinc=estimate(CTpctchildlowincfull), ME90=1.645*standard.error(CTpctchildlowincfull))
CTpctchildlowinc[,c(2:3)]<-CTpctchildlowinc[,c(1:2)]
CTpctchildlowinc[,1]<-rownames(CTpctchildlowinc)
colnames(CTpctchildlowinc)<-c("Town", "Pct Population Under 18 below 200% FPL", "90% MoE")
write.csv(CTtotalchildpov, "2013_Connecticut_towns_Pct_Child_Population_below_200_FPL.csv", row.names=F)
library(acs)
library(stringr)
api.key.install(key="61a6ec2a084f67119446589d66b12b702106746b")
# fetch ACS data
# table name full = acs.fetch(endyear, 5, geography=geomake(state=9,county="*",county.subdivision="*"), table.number="XXX", col.names="pretty")
totalchildlowincfull<-acs.fetch(2013, 5, geography=geo.make(state=9,county="*",county.subdivision="*"), table.number="B17024", col.names="pretty")
# shorten town names
# geography(table name full)[,1]=str_replace(geography(table name full)[,1]," town.*","")
geography(totalchildlowincfull)[,1]=str_replace(geography(totalchildlowincfull)[,1]," town.*","")
# delete county subdivisions undefined
# table name = table name full[c(2:79,81:95,97:123,125:173),]
totalchildlowinc<-totalchildlowincfull[c(2:79,81:95,97:123,125:173),]
# Calculate total child low inc per town
townchildlowinc=apply(X=totalchildlowinc[,c(3:10,16:23,29:36)], FUN=sum, MARGIN=2, agg.term="Totalchildlowinc")
townchild=apply(X=totalchildlowinc[,c(2,15,28)], FUN=sum, MARGIN=2, agg.term="Totalchild")
pctchildlowinc=divide.acs(numerator=townchildlowinc, denominator=townchild, method="proportion")
# Fetch CT state data and calculate total child low inc
CTtotalchildlowinc<-acs.fetch(2013, 5, geography=geo.make(state=9), table.number="B17024", col.names="pretty")
CTchildlowinc=apply(X=CTtotalchildlowinc[,c(3:10,16:23,29:36)], FUN=sum, MARGIN=2, agg.term="Totalchildlowinc")
CTchild=apply(X=CTtotalchildlowinc[,c(2,15,28)], FUN=sum, MARGIN=2, agg.term="Totalchild")
CTpctchildlowinc=divide.acs(numerator=CTchildlowinc, denominator=CTchild, method="proportion")
CTpctchildlowincfull<-rbind(CTpctchildlowinc, pctchildlowinc)
head(CTpctchildlowincful)
head(CTpctchildlowincfull)
CTpctchildlowinc<-data.frame(Totalchildlowinc=estimate(CTpctchildlowincfull), ME90=1.645*standard.error(CTpctchildlowincfull))
CTpctchildlowinc[,c(2:3)]<-CTpctchildlowinc[,c(1:2)]
CTpctchildlowinc[,1]<-rownames(CTpctchildlowinc)
colnames(CTpctchildlowinc)<-c("Town", "Pct Population Under 18 below 200% FPL", "90% MoE")
write.csv(CTpctchildlowinc, "2013_Connecticut_towns_Pct_Child_Population_below_200_FPL.csv", row.names=F)
library(acs)
library(stringr)
api.key.install(key="61a6ec2a084f67119446589d66b12b702106746b")
# fetch ACS data
# table name full = acs.fetch(endyear, 5, geography=geomake(state=9,county="*",county.subdivision="*"), table.number="XXX", col.names="pretty")
totalchild1to2xpovfull<-acs.fetch(2013, 5, geography=geo.make(state=9,county="*",county.subdivision="*"), table.number="B17024", col.names="pretty")
# shorten town names
# geography(table name full)[,1]=str_replace(geography(table name full)[,1]," town.*","")
geography(totalchild1to2xpovfull)[,1]=str_replace(geography(totalchild1to2xpovfull)[,1]," town.*","")
# delete county subdivisions undefined
# table name = table name full[c(2:79,81:95,97:123,125:173),]
totalchild1to2xpov<-totalchild1to2xpovfull[c(2:79,81:95,97:123,125:173),]
townchild1to2xpov=apply(X=totalchild1to2xpov[,c(6:10,19:23,32:36)], FUN=sum, MARGIN=2, agg.term="Totalchild1to2xpov")
CTtotalchild1to2xpov<-acs.fetch(2013, 5, geography=geo.make(state=9), table.number="B17024", col.names="pretty")
CTchild1to2xpov=apply(X=CTtotalchild1to2xpov[,c(6:10,19:23,32:36)], FUN=sum, MARGIN=2, agg.term="Totalchild1to2xpov")
CTtotalchildpovfull<-rbind(CTchild1to2xpov, townchild1to2xpov)
CTtotalchildpov<-data.frame(Totalchild1to2xpov=estimate(CTtotalchildpovfull), ME90=1.645*standard.error(CTtotalchildpovfull))
CTtotalchildpov[,c(2:3)]<-CTtotalchildpov[,c(1:2)]
CTtotalchildpov[,1]<-rownames(CTtotalchildpov)
colnames(CTtotalchildpov)<-c("Town", "Total Population Under 18 100-200% FPL", "90% MoE")
write.csv(CTtotalchildpov, "2013_Connecticut_towns_Total_Child_Population_1to2FPL.csv", row.names=F)
library(acs)
library(stringr)
api.key.install(key="61a6ec2a084f67119446589d66b12b702106746b")
# fetch ACS data
# table name full = acs.fetch(endyear, 5, geography=geomake(state=9,county="*",county.subdivision="*"), table.number="XXX", col.names="pretty")
totalchildlowincfull<-acs.fetch(2013, 5, geography=geo.make(state=9,county="*",county.subdivision="*"), table.number="B17024", col.names="pretty")
# shorten town names
# geography(table name full)[,1]=str_replace(geography(table name full)[,1]," town.*","")
geography(totalchildlowincfull)[,1]=str_replace(geography(totalchildlowincfull)[,1]," town.*","")
# delete county subdivisions undefined
# table name = table name full[c(2:79,81:95,97:123,125:173),]
totalchildlowinc<-totalchildlowincfull[c(2:79,81:95,97:123,125:173),]
# Calculate total child low inc per town
townchildlowinc=apply(X=totalchildlowincfull[,c(3:10,16:23,29:36)], FUN=sum, MARGIN=2, agg.term="Totalchildlowinc")
# Fetch CT state data and calculate total child low inc
CTtotalchildlowinc<-acs.fetch(2013, 5, geography=geo.make(state=9), table.number="B17024", col.names="pretty")
CTchildlowinc=apply(X=CTtotalchildpoverty[,c(3:10,16:23,29:36)], FUN=sum, MARGIN=2, agg.term="Totalchildlowinc")
CTtotalchildlowincfull<-rbind(CTchildlowinc, townchildlowinc)
CTtotalchildlowinc<-data.frame(Totalchildlowinc=estimate(CTtotalchildlowincfull), ME90=1.645*standard.error(CTtotalchildlowincfull))
CTtotalchildlowinc[,c(2:3)]<-CTtotalchildlowinc[,c(1:2)]
CTtotalchildlowinc[,1]<-rownames(CTtotalchildlowinc)
colnames(CTtotalchildlowinc)<-c("Town", "Total Population Under 18 below 200% FPL", "90% MoE")
write.csv(CTtotalchildlowinc, "2013_Connecticut_towns_Total_Child_Population_below_200_FPL.csv", row.names=F)
